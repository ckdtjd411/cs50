2. C언어

1) C 기초
학습 목표 : C로 "hello, world"를 출력하는 프로그램을 만들 수 있다.

#C언어
	C는 아주 오래되고 전통적인 순수 텍스트 기반의 언어

	#include <stdio.h>
	
	int main(void)
	{
		printf("hello, world!\n");
	}
	
	#include <stdio.h>
		c에서 함수를 사용하기 위해서는 컴퓨터에게 그 함수가 어디에 구현되어 있는지 혹은 저장되어 있는지를 알려주어야 한다.
		함수에 접근하기 위해 stdio.h라는 파일을 찾아보라는 뜻

	int main(void) {}
		스크래치의 "초록색 깃발을 클릭했을 때" 블록과 같은 역할
		즉, '시작한다'의 의미를 가지고 있다.
		앞으로 작성할 코드 모두는 이 int main(void) {}의 중괄호 사이에 작성하게 될 것

	printf("hello world");
		스크래치의 "'hello, world'라고 말하기" 블록과 같은 역할
		글자나 단어, 문장을 적을 때는 언제나 텍스트에 " " 쌍따옴표로 감싸야 한다.
		일상에서 문장의 끝에 마침표(.)를 붙이는 것처럼 C에서는 세미콜론(;)를 붙여야 한다.
		\n은 줄바꿈의 기능. 키보드에서 ENTER의 기능과 동일
		f는 형식화된 형태를 의미, printf는 형식화된 텍스트를 출력
	
	C언어에서는 코드가 담긴 파일을 저장할 때 .c라는 확장자를 사용한다.

#컴파일러
	우리가 직접 작성한 코드는 "소스 코드"라고 불린다.
	컴퓨터가 이해하는 언어는 2진수이므로 컴퓨터가 이해할 수 있도록 0과 1로 번역하려면 중간 단계가 필요하다.
	작성된 소스코드를 2진수로 작성된 "머신 코드"로 변환해야 컴퓨터가 이해할 수 있다.
	이런 작업을 컴파일러라는 프로그램이 수행
	
	source code → compiler → machine code
	
	머신코드는 컴퓨터가 실제로 이해하는 0과 1의 조합
	소스코드로부터 머신코드를 얻기 위해서는 이러한 번역을 수행하는 알고리즘 혹은 소프트웨어가 필요한데 이를 컴파일러라고 부른다.
	
	터미널창의 명령어 프롬프트에서 "$" 기호 옆에 명령어를 입력
	터미널 창
		일종의 옛날 인터페이스
		프롬프트에 입력하고 엔터를 치면 코드를 실행할 수 있다.
		대부분의 초기 프로그래밍 언어들은 명령어 입력 방식을 사용
	
	calng hello.c라는 명령어는 "clang"이라는 컴파일러로 "hello.c"라는 코드를 컴파일하라는 의미
	
	./a.out	현재 디렉토리에 있는 a.out이라는 파일을 실행하라

#추가	
많은 언어들은 시키는 일만 한다.
새로운 버전의 작업을 수행하려면 다시 컴파일 해야한다.
	
코드 가독성을 위해 코드와 코드 사이를 나누기도 한다.
마우스와 그래픽 UI로 할 수 있는 모든 일을 명령어만으로도 할 수 있다.


2) 문자열
학습 목표 : C로 문자열 형식을 가진 변수를 선언하고 출력하는 프로그램을 만들 수 있다.

String은 프로그래머들이 단어나 구절, 문장을 부르는 말(숫자와는 다른 종류의 데이터)
get_string, ask 함수와 가장 비슷한 함수이다.

문자열을 입력할 때는 반드시 양 끝을 쌍따옴표로 감싸야 한다
\n : new line

c는 오래된 언어이기 때문에 변수가 저장하는 데이터의 종류를 정확하게 명시해 주어야 한다.
변수명의 왼쪽에 저장하고자 하는 값의 종류가 문자열임을 알려주어야 한다.
문자열은 쌍따옴표 안에 들어간 0개 이상의 문자 배열

string answer = get_string("What's your name?\n");
프로그래밍에서 등호(=)의 의미는 같다는 뜻이 아니라 지정한다는 뜻이다.(할당 연산자)
get_string 함수가 사용자의 이름을 반환하면 그 이름을 answer라는 변수에 저장하는 것

프로그래밍에서 인자 혹은 매개 변수라고 하는 우리의 입력이 들어간다.
이 때 어떤 종류의 인자를 받는지 말해줘야 한다.
printf("hello, %s\n", answer);
>> 문자열을 받기 때문에 string에서의 s를 %뒤에 붙여서 인자를 받아준다.
	%s는 입력값이 들어갈 형식지정자
C의 함수들은 인자를 받지 않거나 하나 이상의 인자를 받을 수 있다.

소스코드에서 머신코드로 번역하고 싶다면 clang 명령어를 사용
$clang -o string string.c lcs50
여기서 -o string은 string.c를 string.out이라는 머신코드로 저장하도록 하는 명령어
-lcs50은 "link"라는 의미를 지닌 -l이라는 인자에 추가로 포함한 "cs50" 파일을 합친 것
이를 통해 컴파일시 cs50 파일을 연결하도록 알려줄 수 있다.

이런 과정 대신에 make 명ㄹ령어를 통해 간단하게 컴파일을 수행할 수도 있다.
$make string

해결하기 위한 시작점은 언제나 첫번째 에러 메시지
첫 번째 에러에 집중

cs50 라이브러리를 사용할 떄는 먼저 소스코드에서는 컴퓨터에게 cs50.h라는 파일을 추가하라고 해야 한다.
컴파일 때 중복되는 것 같지만 다시 한번 컴퓨터에게 cs50에 있는 모든 코드를 추가하도록 해야한다.

#생각해보기
Q : "좋아하는 동물을 알려주세요"로 질문하여 동물 이름을 animal이라는 변수에 저장하고, 
	이를 "내가 좋아하는 동물은"으로 출력해주는 코드를 작성
A : string favorite_animal = get_tsring("좋아하는 동물을 알려주세요 ");
	printf("내가 좋아하는 동물은 %s\n", favorite_animal);


3) 조건문과 루프
학습 목표 : 조건문과 루프를 c로 작성할 수 있다.

int counter = 0;
변수를 선언할 때는 컴퓨터에게 저장하고자 하는 변수의 종류가 무엇인지 알려주어야 한다.
int는 변수가 정수(integer)라는 것을 알려주는 것이고 counter는 변수의 이름, 0은 그 값에 0을 저장(초기화)하는 것
c에서는 정수 데이터를 int 혹은 integer라고 부른다. (줄여서 int)

if ()의 괄호 안에는 검사하고자 하는 조건이 들어가고, {}안에는 조건을 만족할 때 수행하고자 하는 작업이 들어간다.
else를 이용해 처음 조건이 아닌 경우에 수행할 동작을 알려줄 수 있다.

if (x < y) 
{ 
	printf("x is less than y\n");
}
x가 y보다 작으면 {} 내의 코드를 실행
조건과 같은 것들의 끝에는 세미콜론을 붙이지 않는다.

== : 일치 연산자, 같다(equal)을 표현

코드의 수준 혹은 정확성 즉 해야할 일을 잘 수행하는가도 있지만 효율적으로 코드를 작성했는지
혹은 얼마나 적은 메모리나 cpu를 사용해서 코드가 일을 수행하는지도 중요하다.

#루프
	while이나 for을 통해서 루프를 구현할 수 있다.
	while의 경우 while ()의 괄호 안에 조건을 넣고 {}안에 수행할 작업을 포함시키면 된다.
	
	c에서 루프를 구현하고 싶다면 성립 조건을 정해줘야 한다.
	() 내의 조건이 yes, true 혹은 1로 나올 수 있는 질문이여야 함.
	while(true) : 영원히 반복하는 무한 루프

	for 루프는 주어진 일을 계쏙해서 반복하지만 훨씬 더 기계적으로 수행
	for () 안에 각각 (변수 초기화; 변수 조건; 변수 증가)에 해당하는 코드를 넣어서 간단하게 표현한다.

#생각해보기
Q : 학습한 다양한 방법을 이용하여 "개발공부는 재미있다!"를 10번 출력하는 코드를 작성
A : for (int i = 0; i < 10; i++)
	{
		printf("개발공부는 재미있다!\n");
	}


4) 자료형, 형식 지정자, 연산자
학습 목표 : 다양한 데이터 타입과 형식 지정자를 나타내는 방법을 학습
		 다양한 연산자를 이용하여 조건문을 표현하는 방법을 학습

#데이터 타입
	변수의 데이터 타입으로 사용할 수 있는 것
	• bool: 불리언 표현, (예) True, False, 1, 0, yes, no
	• char: 문자 하나 (예) 'a', 'Z', '?'
	• string: 문자열
	• int: 특정 크기 또는 특정 비트까지의 정수 (예) 5, 28, -3, 0
	• long: 더 큰 크기의 정수
	• float: 부동소수점을 갖는 실수 (예) 3.14, 0.0, -28.56
	• double: 부동소수점을 포함한 더 큰 실수

#CS50 라이브러리 내의 get 함수
	CS50 라이브러리는 데이터 타입을 입력값으로 받을 수 있는 함수들을 포함한다.
	• get_char
	• get_double
	• get_float
	• get_int
	• get_long
	• get_string

#형식 지정자
	printf 함수에서는 각 데이터 타입을 위한 형식 지정자를 사용할 수 있다.
	• %c : char
	• %f : float, double
		%f에서 f앞에 '.원하는 자리수'를 넣어 소수점 n번째 자리까지 나오게 할 수 있다.
	• %i : int
	• %li : long
	• %s : string

	상황에 따라 알맞은 형식 지정자를 사용
	컴퓨터는 특정 수의 비트를 사용해서 숫자를 저장하고 그 비트를 활용하면 소수점 뒤에 나타낸다.
	
#기타 연산자 및 주석
	• +:  더하기
	• -: 빼기
	• *: 곱하기
	• /: 나누기
	• %: 나머지
	• &&: 그리고
	• ||: 또는
	• //: 주석

#정수와 실수를 받아서 출력해보기
	# include <cs50.h>
	# include <stdio.h>
	int main(void)
	{
		printf("Your are at least %i days old.\n", get_int("what's your age?\n") * 365);
	}
	한 함수의 출력을 다른 함수의 입력으로 넣어서 변수를 만들지 않아도 되지만 이는 너무 길어서 가독성이 떨어진다.
	
#주석
	코드가 무슨 일을 해야하는지 설명하는 내용
	코드가 수 백, 수 천줄이 되면 주석이 없다면 부분 부분마다 어떤 일을 하는지 찾기 힘들다.

#참고) #include <cs50.h>는 무엇인가?
	CS50 수업을 위해 만들어진 라이브러리, 라이브러리는 여러 함수들을 모아둔 것이라고 볼 수 있다.
	좀 더 쉽게 코딩을 짤 수 있게 CS50 라이브러리 안에 여러 함수(get_int, get_double ...)과 같은 함수를 만들어 두었다.
	표준 라이브러리는 기본적으로 설치가 되어 있기 때문에 사용이 가능하지만 cs50 라이브러리는 미리 설치가 된 곳이 아니라면 라이브러리를 따로 설치를 하여야 사용이 가능하다.

#생각해보기
Q : 짝수인지 홀수인지 알려주는 코드짜기에 자신의 스타일 대로 주석
A : 
	#include <cs50.h>
	#include <stdio.h>

	int main(void)
	{
		// 사용자 수 입력
		int n = get_int("n: ");

		// 홀수, 짝수 판단
		if (n % 2 == 0)
		{
			printf("even\n");
		}
		else
		{
			printf("odd\n")
		}
	}


5) 사용자 정의 함수, 중첩 루프
학습 목표 : 사용자 정의 함수와 중첩 루프를 작성할 수 있다.

#사용자 정의 함수
	동일한 작업을 반복하는 것이라면 사용자 정의 함수를 이용해 단순화할 수 있다.
	void cough(void)
	{
		printf("cough\n")
	}
	int main(void)
	{
		for (int i = 0; i < 3; i++)
		{
			cough();
		}
	}
	함수를 1개가 아닌 여러개를 만들수록 main 함수는 아래로 내려간다.
	중요한 것이 바로 나오는 것이 보기 좋으므로 main 함수를 위로 올린다면 오류가 발생한다.
	cough 함수가 main보다 아래에 있기 때문에 cough라는 함수가 있을 것이라 생각하지 못한다.
	
	main 함수를 정의한 cough 함수보다 위에 위치시키고 싶다면 void cough(int n);를
	먼저 입력해서 cough라는 함수가 정의되어있음을 알려주어야 한다.
	
	int get_positive_int(void)
	{
		int n;
		do
		{
			n = get_int("Positive Integer: ");
		}
		while (n < 1);
		return n;
	}
	어떤 값을 받아와서 변수에 저장하는 것처럼 함수가 뭔가를 반환하고자 할 때,
	함수명 앞에 출력의 종류를 명시해 준다.
	int get_positive_int(void) 괄호 안은 입력의 종류를 뜻한다.
	입출력이 없다면 void
	
	do-while 루프
	불리언 표현 즉, 괄호 안의 조건이 참일때 다음을 수행한다.
	while을 단독으로 사용하면 while의 조건이 참이어야만 수행을 하지만 do-while은 do에서 무조건 한 번은 먼저 수행하게 된다.

#생각해 보기
Q : 사용자 정의 함수를 사용하는 것의 장점은 무엇일까?
A : 사용자가 원하는 기능을 만들어서 사용할 수 있다.
	코드가 길어질 경우 함수를 따로 만들어 가독성을 높인다.