3주차 LIVE 배열

1. 배열 되짚어 보기
#컴파일링
컴파일이란?
	우리가 이해할 수 있는 언어 (C언어)로 되어 있는 소스 코드를 컴퓨터가 이해할 수 있는 언어로 변환하는 작업
	소스코드 → 전처리 → 컴파일 → 어셈블 → 링크
	
만약 컴파일링 과정을 거치지 않고 기계어로 프로그래밍을 바로 작성한다면?
	1. 내가 기계어를 배워야 함
	2. 동료가 기계어를 배워야 함
	3. 가독성이 떨어짐

#디버깅
디버깅이란?
	코드 상에 있는 버그를 식별하고 고치는 과정
	
왜 필요할까? - 오류(Error)를 고치기 위해서
	프로그래밍이 커짐에 따라 코드가 길어지면 오류를 찾기가 힘들다.
	이 때 필요한 것이 디버깅

디버깅을 도와주는 도구가 없다면?
	오류가 의심되는 부분에 printf()를 도배하여 변수들의 상태를 살펴보고
	코드를 다시 컴파일-실행해서 출력을 하나식 확인한다.

#코드의 디자인
왜 필요할까? - 협업하기 위해서
	코드의 디자인이 정의되지 않으면 개발자들이 각각의 스타일로 작성하므로 가독성이 떨어지고 유지보수가 어렵다.

코드에서 디자인은 무엇을 의미하나?
	컴퓨터 언어 각각의 스타일 가이드
	또는 업무 단위의 약속

C언어 Code Style
https://developer.gnome.org/programming-guidelines/stable/c-coding-style.html.ko

#배열
배열(Array)란?
	인덱스(Index)와 번호에 대응하는 데이터들로 이루어진 프로그래밍 언어에서 가장 기초적인 자료구조
	- 일반적으로 같은 종류의 데이터들이 순차적으로 저장되어, 상대적인 위치로 표현
	
→ 같은 자료형의 데이터를 메모리 상에 저장하고 이를 하나의 변수로 관리하기 위해 사용
반복문 / 조건문을 활용하면 실생활의 요구사항들을 해결하는데 도움이 된다.


2. '3주차 미션'
1) 학점을 계산해보자!
- 배열을 이용해서 값 정의
- 반복문을 이용해서 출력

C언어는 Snake Case (코드 스타일)
코드 작성 이전, 필요 요소를 논리적으로 순서 정리

2) 누가 빠졌는지 찾아보자!
- 배열을 이용해서 값 정의
- 반복문을 이용해서 출력

3) Queue를 만들어보자!
- Queue를 이용해서 문제 정의
- 자료구조 배우기 전 몸풀기


3. 사전질문 Q&A
#개발자가 지켜야할 덕목
	1. 모르는 것을 두려워하지 말자(배우는 것을 두려워하지 말자)
	2. 의사소통
	3. 스트레스 관리

#함께 일하고 싶은 개발자 또는 동료가 되는 법
- 리뷰를 잘해주는 동료
- 아는 것/모르는 것을 공유해주는 동료

요건 역량을 꼭 챙기자
	코드 스타일
	테스팅, 테스트 코드를 만들어두면 동작과정을 확인하고 추가기능을 구현하기 좋다.

1. 다른 전공이였다가 소프트웨어 학과를 복수전공 하게 되었는데 선택하게 된 계기와 이후 진로 설정은 어떻게?
	더 흥미가 생겨서!
	
2. 네이버, 카카오 등 IT 대기업에 개발자로 입사를 준비하려면 무엇부터 시작하며 어떤 스펙을 갖춰야 하는지?
 IT/SW 기업이 많은데, 입사 지원 시에 고려해야할 사항이 있다면?
	컴퓨터 사이언스, 기초지식을 갖추는 것이 중요!
	스펙은 대기업에서나 필요 ㅎㅎ..
	주로 사용하는 언어에 맞게 지원해보자

3. 개발자로 취업하기 위해 이론공부와 프로젝트 말고도 깃허브나 블로그 관리도 필수적으로 해야할까?
	본인에게 도움이 되는 커밋을 해야한다.
	토이프로젝트를 통해 몇일까지는 이러한 기능을 구현하고 공부하겠다.

4. 예비 개발자 시절로 돌아간다면 어떤 기본기를 가장 배우고 싶은가?
	교과 과정은 다 중요하다! 그 중 알고리즘과 자료구조
	기초적인 개념을 다지는 것
	언어를 배우면서 자료구조나 알고리즘을 다루지는 않기 때문에 생각하는 방법을 배우기 위해
	언어는 도구이다. 알고리즘을 작성하기 위한

5. 기획자 분들과 협업 도중에 문제가 생긴다면 어떻게 해결하는가?
	의사소통이 필요한 부분
	먼저 문제가 생기지 않도록 서로간의 의견을 종합한다.
	
(+) 프로그래밍을 할 때 논리적 사고력이 중요하다. 어떤 자질/능력이 가장 중요한가?
	아는 것과 모르는 것을 구분하고 다른 사람에게 전달하기 위해 의사소통 능력이 필요

6. 코딩조차 자동으로 설계가 되는 시대가 온다고 하는데 그런 시대가 오면 코딩을 공부할 필요가 있을까?
	자동으로 설계가 되는 부분이 있고 아닌 부분이 있을 것.
	요구사항이 명확한 부분은 자동화가 될 것이고, 불분명한 부분은 개발자의 역할이 아닐까

(+) 백엔드이면 자바, 코틀린 / 프레임워크 - 스프링 프레임워크
교과과정을 배운 과정을 잘 이해하자!
끊임없이 공부해야 한다!