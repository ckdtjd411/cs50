4주차 LIVE

1. 알고리즘 되짚어 보기
#알고리즘의 효율성
	컴퓨터 프로그래밍에서 주어진 문제를 얼마나 효율적으로 푸느냐는 매우 중요하다.
	
	선형검색(Linear Search)
	이진검색(Binary Search)
	
	이진검색을 위해서는 정렬이 되어 있어야 하는데 정렬을 하는데 더 오래 걸린다면? 선형검색
	항상 고정된 정답이 아니라 상황에 따라 달라진다.

#정렬 알고리즘
	선택 정렬(Selection Sort)
	- 정렬되지 않은 수 중에 가장 작은 수를 찾아 정렬되지 않은 첫 번째 위치의 수와 교환하는 방식의 정렬
	버블 정렬(Bubble Sort)
	- 두 개의 인접한 수를 비교하면서 위치를 교환하는 방식의 정렬
	병합 정렬(Merge Sort)
	- 원소가 한개가 될 때까지 계속 반으로 나눈 뒤 다시 합쳐 나가며 정렬
	
	정렬 알고리즘은 가장 기본! 잘 학습을 해두면 이후의 학습에 도움이 될 것

#알고리즘의 시간 복잡도
	Big O - 최악의 경우, 알고리즘 실행시간의 상한
	Big Ω - 최선의 경우, 알고리즘 실행시간의 하한
	Big Θ - O와 Ω가 같은 경우 Θ로 표현
	
#삽입 정렬의 시간 복잡도 생각해보기
	삽입정렬(Insertion Sort)은 배열의 모든 요소를 앞에서부터 차례로 이미 정렬된 부분과 비교하며,
	자신의 위치를 찾아 삽입하는 방식의 정렬
	
	삽입정렬의 시간복잡도는?
	Big O - O(n^2)
	Big Ω - Ω(n)


2. '4주차 미션'
1) 숫자 애너그램 찾기
	- 정렬 후 비교하기
	- 정렬을 사용하지 않고 해결

2) 친구들과 최단 거리에 있는 집 구하기
	- 집 위치의 중앙값에 있을 때 거리의 합이 최소가 됨을 정확히 이해
	- 정렬을 사용하여 중앙값 계산
	- 각 경우의 시간복잡도를 분석
	(중앙값은 O(n)으로 찾을 수 있다.)

3) 최단 시간에 다리 건너기
	- 다리를 건너지 않은 사람 수에 따라 case를 분리
	- 문제 출제 의도에 맞게 정확히 구현
	- 시간이 1, 3, 4, 10인 경우에 가장 빨리 다리를 건너는 방법은?

4) 가장 큰 낙하 거리 찾기
	- 모든 상자에 대해서 낙하거리를 계산하는 경우의 시간복잡도 정확히 계산
	- 각 열의 최상단에 있는 상자에 대해서만 계산하면 됨을 파악하여 효율적으로 구현
	- 구현한 알고리즘에 대한 시간복잡도 정확히 계산


3. 사전질문 Q&A
#AI 분야
인공지능
	사고나 학습등 인간이 가진 지적 능력을 컴퓨터를 통해 구현하는 기술
머신러닝
	컴퓨터가 스스로 학습하여 인공지능의 성능을 향상 시키는 기술 방법
딥러닝
	인간의 뉴런과 비슷한 인공신경망 방식으로 정보를 처리

<구현 프레임워크>
텐서플로우, 파이토치

1. 어떤 경험을 통해서 AI 분야 종사하게 되었나? AI 분야로 가려면 무엇을 공부하면 좋을까?
	모두를 위한 딥러닝 강의
	하고 싶은 분야를 찾아 공부하는 방법
	수학적, 프로그래밍 기술을 잘해야 하는 것은 아니다.

2. 개발자 입장에서 AI를 어느 정도까지 공부하는 것이 좋을까? 현업에서 웹 분야 개발자라도 AI를 구현할 수 있어야 하는지?
	현업에서는 구현되어 있는 것을 추가하는 방식, 개념을 아는 것이 중요
	코딩을 잘하면 지식은 쌓으면 된다.
	
3. AI 최신 분야 기술들을 어떻게 좇아갈 수 있을까?
	최신 기술들을 빨리 받아들일 수 있는 능력이 필요하다.

4. AI 분야 업무에서 가장 중요하다고 생각되는 스킬?
	실제의 문제에 어떻게 적용시키느냐
	
5. AI가 얼마나 성장할 것인지, 많은 비전이 보이는 분야는?
	테크니컬한 문제가 많다.
	해석이 되지 않는다. (알파고가 바둑을 그 수에 둔 이유를 알지 못한다.)

6. 20대로 돌아간다면 어떤 공부가 경험을 해보고 싶은지?
	사람을 많이 만나볼 듯!
	시야도 넓어지고 도움도 많이 받게 된다.